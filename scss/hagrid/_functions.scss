
////
/// Functions
/// MIT-License © 2016
/// @author Felix Spöttel
/// @access private
/// @group Internal
////

/// Calculate all widths for a call from i, push or pull
/// @param {String} $prop - Can be *width*, *left* or *right*
/// @param {List} $widths - List of breakpoint / width-pairs
/// @output Widths and breakpoints for a mixin-call

@mixin grid-calc($prop, $widths...) {
  $arg-length: length($widths);

  @if $arg-length == 0 {
    // * If no params are passed, default to mobile-first
    @if $prop == width {
      #{$prop}: get-calc(100%);
    }

    @else {
      @error "You need to pass at least one statement to push/pull";
    }
  }

  @else {
    $width-detected: false;

    @for $i from 1 through length($widths) {
      $width: nth($widths, $i);

      // * If a general width is passed in, use it
      @if type-of($width) == number {
        @include get-prop($prop, $width);

        $width-detected: true;
      }
      // * If false is passed, assign no width
      @elseif $width == false {
        $width-detected: true;
      }
      // * If auto is passed, assign no width
      @elseif $width == auto {
        flex: 1 1 auto;
        $width-detected: true;
      }
      // * Handle responsive args
      @else {
        // * "md 2/3"-synthax
        $key: nth($width, 1);
        $value: nth($width, 2);

        // * Cater for "2/3 md"-synthax
        @if type-of($key) == number {
          $value: nth($width, 1);
          $key: nth($width, 2);
        }

        // * Cater for specific breakpoints
        $bp: parse-breakpoint($key);

        @if $bp != false {
          @include bp(#{$key}) {
            @if type-of($value) == number {
              @include get-prop($prop, $value);
            }

            @else if $value == auto {
              flex: 1 1 auto;
              width: auto;
            }

            @else if $value == false {
              @error "You cannot pass false to breakpoint #{$key}.";
            }
          }
        }

        @else {
          @warn "You are trying to assign a width to an unknown or invalid breakpoint: #{$key}";
        }
      }
    }

    // * If only responsive params are passed, default to mobile-first
    @if $width-detected == false and $prop == width {
      #{$prop}: get-calc(100%);
    }
  }
}

/// Calculate a percentage value from a fraction
/// @param {Number} $value
/// @return {Value}

@function calculate-width($value) {
  @if unit($value) != "" {
    @return $value;
  }

  @else {
    @return ($value * 100 * 1%);
  }
}

/// Calculate a calc value based on a gutter
/// @param {Number} $width
/// @param {Number} $gutter
/// @return {Value}

@function get-calc($width, $gutter: $hagrid-gutter) {
  @return unquote("calc(#{calculate-width($width)} - #{$hagrid-gutter})");
}

/// Return calc() or width() based on prop
/// @param {String} $prop
/// @param {Number} $value
/// @return {Value}

@mixin get-prop($prop, $value) {
  @if $prop == width {
    #{$prop}: get-calc($value);
  }

  @else {
    #{$prop}: calculate-width($value);
  }
}

/// Validate a breakpoint-key and return itself, its value or false
/// @param {String} $key
/// @param {Boolean} $get-map
/// @return {String | Boolean}

@function parse-breakpoint($key, $get-map: true) {
  @if map-has-key($hagrid-breakpoints, $key) {
    @if $get-map == false {
      @return $key;
    }

    @else {
      @return map-get($hagrid-breakpoints, $key);
    }
  }

  @elseif is-mq($key) {
    @return $key;
  }

  @else {
    @return false;
  }
}

/// Check if a string is a mediaquery
/// @param {String} $string
/// @return {Boolean}

@function is-mq($string) {
  @if str-starts-with($string, unquote("(")) and str-end-with($string, unquote(")")) {
    @return true;
  }

  @else {
    @return false;
  }
}

/// Check if a string starts with a substring
/// @param {String} $string
/// @param {String} $needle
/// @return {Boolean}

@function str-starts-with($string, $needle) {
  @if type-of($string) != "string" {
    @warn "`str-starts-with` function expecting a string for $string; #{type-of($string)} given.";
    @return false;
  }

  @if type-of($needle) != "string" {
    @warn "`str-starts-with` function expecting a string for $needle; #{type-of($needle)} given.";
    @return false;
  }

  @return str-slice($string, 1, str-length($needle)) == $needle;
}

/// Check if a string ends with a substring
/// @param {String} $string
/// @param {String} $needle
/// @return {Boolean}

@function str-ends-with($string, $needle) {
  @if type-of($string) != "string" {
    @warn "`str-starts-with` function expecting a string for $string; #{type-of($string)} given.";
    @return false;
  }

  @if type-of($needle) != "string" {
    @warn "`str-starts-with` function expecting a string for $needle; #{type-of($needle)} given.";
    @return false;
  }

  @return str-slice($string, -1 * str-length($needle)) == $needle;
}

@function halves($num) {
  @if type-of($num) != "number" {
    @warn "`halves` function expecting a number; #{type-of($num)} given.";
    @return false;
  }

  @return ($num / 2);
}
